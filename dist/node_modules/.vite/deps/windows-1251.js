// node_modules/windows-1251/windows-1251.mjs
var stringFromCharCode = String.fromCharCode;
var INDEX_BY_CODE_POINT = /* @__PURE__ */ new Map([
  [152, 24],
  [160, 32],
  [164, 36],
  [166, 38],
  [167, 39],
  [169, 41],
  [171, 43],
  [172, 44],
  [173, 45],
  [174, 46],
  [176, 48],
  [177, 49],
  [181, 53],
  [182, 54],
  [183, 55],
  [187, 59],
  [1025, 40],
  [1026, 0],
  [1027, 1],
  [1028, 42],
  [1029, 61],
  [1030, 50],
  [1031, 47],
  [1032, 35],
  [1033, 10],
  [1034, 12],
  [1035, 14],
  [1036, 13],
  [1038, 33],
  [1039, 15],
  [1040, 64],
  [1041, 65],
  [1042, 66],
  [1043, 67],
  [1044, 68],
  [1045, 69],
  [1046, 70],
  [1047, 71],
  [1048, 72],
  [1049, 73],
  [1050, 74],
  [1051, 75],
  [1052, 76],
  [1053, 77],
  [1054, 78],
  [1055, 79],
  [1056, 80],
  [1057, 81],
  [1058, 82],
  [1059, 83],
  [1060, 84],
  [1061, 85],
  [1062, 86],
  [1063, 87],
  [1064, 88],
  [1065, 89],
  [1066, 90],
  [1067, 91],
  [1068, 92],
  [1069, 93],
  [1070, 94],
  [1071, 95],
  [1072, 96],
  [1073, 97],
  [1074, 98],
  [1075, 99],
  [1076, 100],
  [1077, 101],
  [1078, 102],
  [1079, 103],
  [1080, 104],
  [1081, 105],
  [1082, 106],
  [1083, 107],
  [1084, 108],
  [1085, 109],
  [1086, 110],
  [1087, 111],
  [1088, 112],
  [1089, 113],
  [1090, 114],
  [1091, 115],
  [1092, 116],
  [1093, 117],
  [1094, 118],
  [1095, 119],
  [1096, 120],
  [1097, 121],
  [1098, 122],
  [1099, 123],
  [1100, 124],
  [1101, 125],
  [1102, 126],
  [1103, 127],
  [1105, 56],
  [1106, 16],
  [1107, 3],
  [1108, 58],
  [1109, 62],
  [1110, 51],
  [1111, 63],
  [1112, 60],
  [1113, 26],
  [1114, 28],
  [1115, 30],
  [1116, 29],
  [1118, 34],
  [1119, 31],
  [1168, 37],
  [1169, 52],
  [8211, 22],
  [8212, 23],
  [8216, 17],
  [8217, 18],
  [8218, 2],
  [8220, 19],
  [8221, 20],
  [8222, 4],
  [8224, 6],
  [8225, 7],
  [8226, 21],
  [8230, 5],
  [8240, 9],
  [8249, 11],
  [8250, 27],
  [8364, 8],
  [8470, 57],
  [8482, 25]
]);
var INDEX_BY_POINTER = /* @__PURE__ */ new Map([
  [0, "Ђ"],
  [1, "Ѓ"],
  [2, "‚"],
  [3, "ѓ"],
  [4, "„"],
  [5, "…"],
  [6, "†"],
  [7, "‡"],
  [8, "€"],
  [9, "‰"],
  [10, "Љ"],
  [11, "‹"],
  [12, "Њ"],
  [13, "Ќ"],
  [14, "Ћ"],
  [15, "Џ"],
  [16, "ђ"],
  [17, "‘"],
  [18, "’"],
  [19, "“"],
  [20, "”"],
  [21, "•"],
  [22, "–"],
  [23, "—"],
  [24, ""],
  [25, "™"],
  [26, "љ"],
  [27, "›"],
  [28, "њ"],
  [29, "ќ"],
  [30, "ћ"],
  [31, "џ"],
  [32, " "],
  [33, "Ў"],
  [34, "ў"],
  [35, "Ј"],
  [36, "¤"],
  [37, "Ґ"],
  [38, "¦"],
  [39, "§"],
  [40, "Ё"],
  [41, "©"],
  [42, "Є"],
  [43, "«"],
  [44, "¬"],
  [45, "­"],
  [46, "®"],
  [47, "Ї"],
  [48, "°"],
  [49, "±"],
  [50, "І"],
  [51, "і"],
  [52, "ґ"],
  [53, "µ"],
  [54, "¶"],
  [55, "·"],
  [56, "ё"],
  [57, "№"],
  [58, "є"],
  [59, "»"],
  [60, "ј"],
  [61, "Ѕ"],
  [62, "ѕ"],
  [63, "ї"],
  [64, "А"],
  [65, "Б"],
  [66, "В"],
  [67, "Г"],
  [68, "Д"],
  [69, "Е"],
  [70, "Ж"],
  [71, "З"],
  [72, "И"],
  [73, "Й"],
  [74, "К"],
  [75, "Л"],
  [76, "М"],
  [77, "Н"],
  [78, "О"],
  [79, "П"],
  [80, "Р"],
  [81, "С"],
  [82, "Т"],
  [83, "У"],
  [84, "Ф"],
  [85, "Х"],
  [86, "Ц"],
  [87, "Ч"],
  [88, "Ш"],
  [89, "Щ"],
  [90, "Ъ"],
  [91, "Ы"],
  [92, "Ь"],
  [93, "Э"],
  [94, "Ю"],
  [95, "Я"],
  [96, "а"],
  [97, "б"],
  [98, "в"],
  [99, "г"],
  [100, "д"],
  [101, "е"],
  [102, "ж"],
  [103, "з"],
  [104, "и"],
  [105, "й"],
  [106, "к"],
  [107, "л"],
  [108, "м"],
  [109, "н"],
  [110, "о"],
  [111, "п"],
  [112, "р"],
  [113, "с"],
  [114, "т"],
  [115, "у"],
  [116, "ф"],
  [117, "х"],
  [118, "ц"],
  [119, "ч"],
  [120, "ш"],
  [121, "щ"],
  [122, "ъ"],
  [123, "ы"],
  [124, "ь"],
  [125, "э"],
  [126, "ю"],
  [127, "я"]
]);
var decodingError = (mode) => {
  if (mode === "replacement") {
    return "�";
  }
  throw new Error();
};
var encodingError = (mode) => {
  if (mode === "replacement") {
    return 65533;
  }
  throw new Error();
};
var decode = (input, options) => {
  let mode;
  if (options && options.mode) {
    mode = options.mode.toLowerCase();
  }
  if (mode !== "replacement" && mode !== "fatal") {
    mode = "replacement";
  }
  const length = input.length;
  if (typeof input === "string") {
    const bytes = new Uint16Array(length);
    for (let index = 0; index < length; index++) {
      bytes[index] = input.charCodeAt(index);
    }
    input = bytes;
  }
  const buffer = [];
  for (let index = 0; index < length; index++) {
    const byteValue = input[index];
    if (0 <= byteValue && byteValue <= 127) {
      buffer.push(stringFromCharCode(byteValue));
      continue;
    }
    const pointer = byteValue - 128;
    if (INDEX_BY_POINTER.has(pointer)) {
      buffer.push(INDEX_BY_POINTER.get(pointer));
    } else {
      buffer.push(decodingError(mode));
    }
  }
  const result = buffer.join("");
  return result;
};
var encode = (input, options) => {
  let mode;
  if (options && options.mode) {
    mode = options.mode.toLowerCase();
  }
  if (mode !== "fatal" && mode !== "replacement") {
    mode = "fatal";
  }
  const length = input.length;
  const result = new Uint16Array(length);
  for (let index = 0; index < length; index++) {
    const codePoint = input.charCodeAt(index);
    if (0 <= codePoint && codePoint <= 127) {
      result[index] = codePoint;
      continue;
    }
    if (INDEX_BY_CODE_POINT.has(codePoint)) {
      const pointer = INDEX_BY_CODE_POINT.get(codePoint);
      result[index] = pointer + 128;
    } else {
      result[index] = encodingError(mode);
    }
  }
  return result;
};
var labels = [
  "cp1251",
  "windows-1251",
  "x-cp1251"
];
export {
  decode,
  encode,
  labels
};
/*! Bundled license information:

windows-1251/windows-1251.mjs:
  (*! https://mths.be/windows-1251 v3.0.4 by @mathias | MIT license *)
*/
//# sourceMappingURL=windows-1251.js.map
